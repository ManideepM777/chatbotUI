def COLOR_MAP = [
    'FAILURE' : 'danger',
    'SUCCESS' : 'good'
]

pipeline{
    agent any
    tools{
        jdk 'jdk17'
        nodejs 'node19'
    }
    environment {
        SCANNER_HOME=tool 'sonar-scanner'
    }

    stages {
        stage('Notify Build Start') {
            steps {
                script {
                    slackSend (
                        channel: '#devops',
                        color: 'warning',
                        message: "*Build Started:* Job ${env.JOB_NAME} \n build ${env.BUILD_NUMBER} \n More info at: ${env.BUILD_URL}"
                    )
                }
            }
        }
        stage('Checkout from Git'){
            steps{
                git branch: 'main', url: 'https://github.com/ManideepM777/chatbotUI.git'
            }
        }
        stage('Install Dependencies') {
            steps {
                dir('Chatbot-UI') {
                    sh "npm install"
                }
            }
        }
//         stage("Sonarqube Analysis "){
//             steps{
//                 withSonarQubeEnv('sonar-server') {
//                     sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Chatbot \
//                             -Dsonar.projectKey=Chatbot '''
//                 }
//             }
//         }
//         stage("quality gate"){
//             steps {
//                 script {
//                     waitForQualityGate abortPipeline: false, credentialsId: 'jenkins-sonarqube-token'
//                 }
//             }
//         }
//         stage('OWASP FS SCAN') {
//             steps {
//                 dependencyCheck additionalArguments: '--scan ./ --nvdApiKey $NVD_API_KEY', odcInstallation: 'DP-Check'
//                 dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
//             }
//         }
//         stage('TRIVY FS SCAN') {
//             steps {
//                 sh "trivy fs --scanners vuln --skip-files dependency-check-report.xml . > trivyfs.json"
//             }
//         }
        stage("Docker Build & Push"){
            steps{
                script{
                    dir('Chatbot-UI'){
                        withCredentials([usernamePassword(credentialsId: 'docker', passwordVariable: 'PASS', usernameVariable: 'USER', toolName: 'docker')]) {
                                           sh "docker build -t chatbot ."
                                           sh "echo $PASS | docker login -u $USER --password-stdin"
                                           sh "docker tag chatbot manideepm777/chatbot:${BUILD_NUMBER}"
                                           sh "docker push manideepm777/chatbot:${BUILD_NUMBER}"
                        }
                    }
                }
            }
        }
//         stage("TRIVY") {
//             steps {
//                 sh "trivy image --scanners vuln --format json -o trivy.json manideepm777/chatbot:${BUILD_NUMBER}"
//             }
//         }
        stage('Update Deployment file') {
            environment {
                GIT_REPO_NAME = "chatbotUI"
                GIT_USER_NAME = "ManideepM777"
            }
            steps {
                dir('Chatbot-UI/k8s'){
                    withCredentials([string(credentialsId: 'githubcred', variable: 'GITHUB_TOKEN')]) {
                        sh '''
                            git config user.email "manideepmavillapalli@gmail.com"
                            git config user.name "ManideepM777"
                            BUILD_NUMBER=${BUILD_NUMBER}
                            echo $BUILD_NUMBER
                            imageTag=$(grep -oP '(?<=chatbot:)[^ ]+' chatbot-ui.yaml)
                            echo $imageTag
                            sed -i "s/chatbot:${imageTag}/chatbot:${BUILD_NUMBER}/" chatbot-ui.yaml
                            git add chatbot-ui.yaml
                            git commit -m "Update deployment Image to version \${BUILD_NUMBER}"
                            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                        '''
                    }
                }
            }
        }
        stage ("Remove container") {
            steps{
                sh "docker stop chatbot | true"
                sh "docker rm chatbot | true"
             }
        }
        stage('Deploy to container'){
            steps{
                sh 'docker run -d --name chatbot -p 3000:3000 manideepm777/chatbot:${BUILD_NUMBER}'
            }
        }
        stage('Deploy to kubernetes'){
            steps{
                dir('Chatbot-UI'){
                    withAWS(credentials: 'aws-key', region: 'us-east-1'){
                        script{
                            withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'k8s', namespace: '', restrictKubeConfigAccess: false, serverUrl: '') {
                                sh 'kubectl apply -f k8s/chatbot-ui.yaml'
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            echo 'Slack Notifications'
            slackSend (
                channel: '#devops',
                color: COLOR_MAP[currentBuild.currentResult],
                message: "*${currentBuild.currentResult}:* Job ${env.JOB_NAME} \n build ${env.BUILD_NUMBER} \n More info at: ${env.BUILD_URL}"
            )
        }
    }
}

