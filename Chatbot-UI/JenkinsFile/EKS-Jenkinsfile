def COLOR_MAP = [
    'FAILURE' : 'danger',
    'SUCCESS' : 'good'
]

properties([
    parameters([
        string(defaultValue: 'variables.tfvars', description: 'Specify the file name', name: 'File-Name'),
        choice(choices: ['apply', 'destroy'], description: 'Select Terraform action', name: 'Terraform-Action')
    ])
])

pipeline {
    agent any
    stages {
        stage('Notify Build Start') {
            steps {
                script {
                    slackSend (
                        channel: '#devops',
                        color: 'warning',
                        message: "*Build Started:* Job ${env.JOB_NAME} \n build ${env.BUILD_NUMBER} \n More info at: ${env.BUILD_URL}"
                    )
                }
            }
        }
        stage('Checkout from Git') {
            steps {
                git branch: 'main', url: 'https://github.com/ManideepM777/chatbotUI.git'
            }
        }
        stage('Initializing Terraform') {
            steps {
                withAWS(credentials: 'aws-key', region: 'us-east-1') {
                    dir('Chatbot-UI/EKS-TF') {
                        script {
                            sh 'terraform init'
                        }
                    }
                }
            }
        }
        stage('Validate Terraform Code') {
            steps {
                withAWS(credentials: 'aws-key', region: 'us-east-1') {
                    dir('Chatbot-UI/EKS-TF') {
                        script {
                            sh 'terraform validate'
                        }
                    }
                }
            }
        }
        stage('Terraform Plan') {
            steps {
                withAWS(credentials: 'aws-key', region: 'us-east-1') {
                    dir('Chatbot-UI/EKS-TF') {
                        script {
                            sh "terraform plan -var-file=${params.'File-Name'}"
                        }
                    }
                }
            }
        }
        stage('Terraform Action') {
            steps {
                withAWS(credentials: 'aws-key', region: 'us-east-1') { 
                    script {
                        echo "${params.'Terraform-Action'}"
                        dir('Chatbot-UI/EKS-TF') {
                            script {
                                if (params.'Terraform-Action' == 'apply') {
                                    sh "terraform apply -auto-approve -var-file=${params.'File-Name'}"
                                }
                                else if (params.'Terraform-Action' == 'destroy') {
                                    sh "terraform destroy -auto-approve -var-file=${params.'File-Name'}"
                                }
                                else {
                                    error "Invalid value for Terraform-Action: ${params.'Terraform-Action'}"
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    post {
            always {
                echo 'Slack Notifications'
                slackSend (
                    channel: '#devops',
                    color: COLOR_MAP[currentBuild.currentResult],
                    message: "*${currentBuild.currentResult}:* Job ${env.JOB_NAME} \n build ${env.BUILD_NUMBER} \n More info at: ${env.BUILD_URL}"
                )
            }
        }
}
